{
  "version": 3,
  "sources": ["../src/weirwood.ts", "../src/porter.ts"],
  "sourcesContent": ["import browser from 'webextension-polyfill';\nimport { ConfigItem, DerivedInstanceState, DerivedState, DerivedWorkerState, StateSubscriber, WeirwoodConnect } from './model/weirwood.model';\nimport { Porter } from './porter';\n\nexport class Weirwood<TConfig extends Record<string, ConfigItem<any>>> {\n    private defaultInstanceState: DerivedInstanceState<TConfig>;\n    private defaultWorkerState: DerivedWorkerState<TConfig>;\n    private instanceStates: { [tabId: number]: DerivedInstanceState<TConfig> };\n    private workerState: DerivedWorkerState<TConfig>;\n    private onStateChangeListeners: Array<(state: Partial<DerivedState<TConfig>>, tabId?: number) => void> = [];\n    private instanceConnectListener: (port: browser.Runtime.Port, instanceStates: { [tabId: number]: DerivedInstanceState<TConfig> }, workerState: DerivedWorkerState<TConfig>) => any = () => { };\n    private instanceDisconnectListener: (port: browser.Runtime.Port, instanceStates: { [tabId: number]: DerivedInstanceState<TConfig> }, workerState: DerivedWorkerState<TConfig>) => void = () => { };\n    private STORAGE_PREFIX = 'ww_';\n    private porter: Porter;\n\n    constructor(private config: TConfig, storagePrefix?: string) {\n        console.log('Weirwood constructor called.');\n        this.defaultInstanceState = this.instanceStates = this.initializeInstanceDefault();\n        this.defaultWorkerState = this.workerState = this.initializeWorkerDefault();\n        this.hydrate();\n        this.porter = new Porter(this);\n        this.porter.onInstanceConnect(port => {\n            const context = this.instanceConnectListener(port, this.instanceStates, this.workerState);\n            const tabId = port.sender!.tab!.id!;\n            this.addInstance(tabId, context);\n            port.onDisconnect.addListener(() => {\n                this.removeInstance(tabId);\n                this.instanceDisconnectListener(port, this.instanceStates, this.workerState);\n            });\n        });\n        if (storagePrefix) {\n            this.STORAGE_PREFIX = storagePrefix;\n        }\n        // Notify tabs of state changes\n        this.subscribe((changes) => {\n            console.log('State change detected. Broadcasting state update. changes: ', changes)\n            this.porter.broadcastStateUpdate(this.get());\n        });\n    }\n\n    public get(): DerivedState<TConfig>\n    public get(tabId: number): DerivedInstanceState<TConfig> & DerivedWorkerState<TConfig>;\n    public get(tabId?: number): (DerivedInstanceState<TConfig> | DerivedState<TConfig>) {\n        if (!tabId) {\n            return { ...this.workerState, ...{} as DerivedInstanceState<TConfig> };\n        }\n        return { ...this.workerState, ...this.instanceStates[tabId] };\n    }\n\n    public async set(state: Partial<DerivedWorkerState<TConfig>>): Promise<void>\n    public async set(state: Partial<DerivedInstanceState<TConfig> & DerivedWorkerState<TConfig>>, tabId: number): Promise<void>\n    public async set(state: Partial<DerivedInstanceState<TConfig> | DerivedWorkerState<TConfig>>, tabId?: number): Promise<void> {\n        console.log(\"Weirwood.set, state: \", state, \" tabId: \", tabId);\n        const instance = {} as Partial<DerivedInstanceState<TConfig>>;\n        const worker = {} as Partial<DerivedWorkerState<TConfig>>;\n\n        for (const key in state) {\n            const item = this.config[key as keyof TConfig] as ConfigItem<any>;\n            if (item.partition === 'instance') {\n                const instanceKey = key as keyof DerivedInstanceState<TConfig>;\n                const instanceState = state as Partial<DerivedInstanceState<TConfig>>;\n                instance[instanceKey] = instanceState[instanceKey];\n            } else if (!item.partition || item.partition === 'worker') {\n                const workerKey = key as keyof DerivedWorkerState<TConfig>;\n                const workerState = state as Partial<DerivedWorkerState<TConfig>>;\n                worker[workerKey] = workerState[workerKey]!;\n            }\n        }\n        if (tabId) this.setInstanceState(tabId, instance);\n        this.setWorkerState(worker);\n    }\n\n    public async setWorkerState(state: Partial<DerivedWorkerState<TConfig>>): Promise<void> {\n        console.log('setWorkerState, update: ', state);\n        const update = { ...this.workerState, ...state };\n        if (!this.deepEqual(this.workerState, update)) {\n            this.workerState = update;\n            await this.persist(state);\n            this.notify(state as Partial<DerivedState<TConfig>>);\n        }\n    }\n\n    public async setInstanceState(tabId: number, state: Partial<DerivedInstanceState<TConfig>>): Promise<void> {\n        console.log('setInstanceState');\n        const update = { ...this.defaultInstanceState, ...this.instanceStates[tabId], ...state };\n        if (!this.deepEqual(this.instanceStates[tabId], update)) {\n            this.instanceStates[tabId] = update;\n            this.notify(state as Partial<DerivedState<TConfig>>, tabId);\n        }\n    }\n\n    public async clear(): Promise<void> {\n        this.workerState = this.defaultWorkerState;\n        this.instanceStates = {};\n        await this.persist();\n        this.notify({});\n    }\n\n    public subscribe(listener: (state: Partial<DerivedState<TConfig>>, tabId?: number) => void): void {\n        this.onStateChangeListeners.push(listener);\n    }\n\n    private notify(state: Partial<DerivedState<TConfig>>, tabId?: number): void {\n        this.onStateChangeListeners.forEach(listener => listener(state, tabId));\n    }\n\n    public async addInstance(tabId: number, context?: any): Promise<void> {\n        if (!this.instanceStates.hasOwnProperty(tabId)) {\n            const initialInstanceState = { ...this.defaultInstanceState } as DerivedInstanceState<TConfig>;\n            if (context) {\n                initialInstanceState.context = { ...context };\n            }\n            console.log(\"Adding tab. new instance state: \", initialInstanceState);\n            this.instanceStates[tabId] = initialInstanceState;\n        }\n    }\n\n    public onInstanceConnect(handler: (\n        port: browser.Runtime.Port,\n        instances: { [tabId: number]: DerivedInstanceState<TConfig> },\n        workerState: DerivedWorkerState<TConfig>) => any,\n    ): any {\n        this.instanceConnectListener = handler;\n    }\n\n    public onInstanceDisconnect(handler: (\n        port: browser.Runtime.Port,\n        instances: { [tabId: number]: DerivedInstanceState<TConfig> },\n        workerState: DerivedWorkerState<TConfig>) => any,\n    ): void {\n        this.instanceDisconnectListener = handler;\n    }\n\n    public async removeInstance(tabId: number): Promise<void> {\n        if (this.instanceStates.hasOwnProperty(tabId)) {\n            delete this.instanceStates[tabId];\n        }\n    }\n\n    // If we pass in specific state to persist, it only persists that state. \n    // Otherwise persists all of the worker state.\n    private async persist(state?: Partial<DerivedWorkerState<TConfig>>): Promise<void> {\n        for (const key in (state || this.workerState)) {\n            const item = this.config[key] as ConfigItem<any>;\n            const persistence = item.persistance || 'none';\n            const value = state ? state[key] : this.workerState[key];\n            console.log(\"Persisting: \", key, value, \" persistence: \", persistence);\n            switch (persistence) {\n                case 'session':\n                    await browser.storage.session.set({ [this.STORAGE_PREFIX + (key as string)]: value });\n                    break;\n                case 'local':\n                    await browser.storage.local.set({ [this.STORAGE_PREFIX + (key as string)]: value });\n                    break;\n                default:\n                    break;\n            }\n        }\n    }\n\n    private async hydrate(): Promise<void> {\n        console.log('Hydrating');\n        const local = await browser.storage.local.get(null);\n        const session = await browser.storage.session.get(null);\n        console.log('session: ', session);\n        const combined = { ...local, ...session };\n        const update: Partial<DerivedWorkerState<TConfig>> = {}; // Cast update as Partial<DerivedState<TConfig>>\n        for (const prefixedKey in combined) {\n            const key = this.removePrefix(prefixedKey);\n            if (this.config.hasOwnProperty(key)) {\n                const value = combined[key];\n                update[key as keyof DerivedWorkerState<TConfig>] = value;\n            }\n        }\n        this.workerState = { ...this.defaultWorkerState, ...update };\n    }\n\n    public getDefaultStates(): DerivedInstanceState<TConfig> & DerivedWorkerState<TConfig> {\n        console.log('Getting default states.');\n        return { ...this.defaultWorkerState, ...this.defaultInstanceState };\n    }\n\n    private initializeInstanceDefault(): DerivedInstanceState<TConfig> {\n        const instanceState: any = {};\n        Object.keys(this.config).forEach(key => {\n            const item: ConfigItem<any> = this.config[key];\n            if (item.partition === 'instance') {\n                instanceState[key] = item.default;\n            }\n        });\n        return instanceState;\n    }\n\n    private initializeWorkerDefault(): DerivedWorkerState<TConfig> {\n        const workerState: any = {};\n        Object.keys(this.config).forEach(key => {\n            const item: ConfigItem<any> = this.config[key];\n            if (item.partition === 'worker') {\n                workerState[key] = item.default;\n            }\n        });\n        return workerState;\n    }\n\n    private removePrefix(key: string): string {\n        if (key.startsWith(this.STORAGE_PREFIX)) {\n            return key.replace(this.STORAGE_PREFIX, '');\n        }\n        return key;\n    }\n\n    private deepEqual(a: any, b: any): boolean {\n        if (a === b) return true;\n\n        if (a == null || typeof a !== 'object' || b == null || typeof b !== 'object') return false;\n\n        const keysA = Object.keys(a);\n        const keysB = Object.keys(b);\n\n        if (keysA.length !== keysB.length) return false;\n\n        keysA.sort();\n        keysB.sort();\n\n        for (let i = 0; i < keysA.length; i++) {\n            const key = keysA[i];\n            if (key !== keysB[i] || !this.deepEqual(a[key], b[key])) return false;\n        }\n        return true;\n    }\n}\n\nexport function create<TConfig extends Record<string, ConfigItem<any>>>(config: TConfig, storagePrefix?: string): Weirwood<TConfig> {\n    return new Weirwood(config, storagePrefix);\n}\n\nexport function connect<TConfig extends Record<string, ConfigItem<any>>>(config: TConfig, context?: string): WeirwoodConnect<TConfig> {\n    console.log(\"Weirewood connect called from context: \", context);\n    // If we're connecting from a content script or app, call browser.runtime.connect\n    const port = browser.runtime.connect({ name: 'weirwood' });\n    let _state = getDerivedState(config);\n    let changes: Partial<DerivedState<TConfig>> | null = null;\n    const listeners = new Map<number, StateSubscriber<TConfig>>();\n    let listenerId = 0;\n    port.onMessage.addListener(message => {\n        if (message.type === 'stateUpdate') {\n            console.log('stateUpdate received, message: ', message);\n            changes = message.state;\n            _state = { ..._state, ...changes };\n\n            listeners.forEach(listener => {\n                if (changes && (listener.key === undefined || Object.keys(changes).includes(String(listener.key)))) {\n                    listener.callback(changes);\n                }\n            });\n        }\n    });\n\n    const get = () => _state;\n    const set = (newState: Partial<DerivedState<TConfig>>) => {\n        console.log('weirwood connect set called.');\n        // console.log('weirwood connect set called. port: ', port.sender!.tab!.id!);\n        port.postMessage({ type: 'setState', payload: { state: newState } });\n    }\n    const subscribe = (callback: (changes: Partial<DerivedState<TConfig>>) => void, key?: keyof DerivedState<TConfig>): number => {\n        listeners.set(++listenerId, { key, callback });\n        return listenerId;\n    }\n    const unsubscribe = (id: number) => {\n        listeners.delete(id);\n    }\n    return { get, set, subscribe, unsubscribe, port };\n}\n\nfunction getDerivedState<TConfig extends Record<string, ConfigItem<any>>>(config: TConfig): DerivedState<TConfig> {\n    const instanceState = {} as DerivedInstanceState<TConfig>;\n\n    Object.keys(config).forEach(key => {\n        const item: ConfigItem<any> = config[key];\n        if (item.partition === 'instance') {\n            instanceState[key as keyof DerivedInstanceState<TConfig>] = item.default;\n        }\n    });\n\n    const workerState = {} as DerivedWorkerState<TConfig>;\n    Object.keys(config).forEach(key => {\n        const item: ConfigItem<any> = config[key];\n        if (item.partition === 'instance') {\n            workerState[key as keyof DerivedWorkerState<TConfig>] = item.default;\n        }\n    });\n\n    return { ...instanceState, ...workerState } as DerivedState<TConfig>;\n}\n", "import browser from 'webextension-polyfill';\nimport { Weirwood } from './weirwood';\n\nexport class Porter {\n    private ports: { [tabId: number]: { [frameId: number]: browser.Runtime.Port } } = {};\n    private onInstanceConnectListener: (port: browser.Runtime.Port) => void = () => { };\n    private instanceDisconnectListener: (port: browser.Runtime.Port) => void = () => { };\n\n    constructor(private stateManager: Weirwood<any>) {\n        browser.runtime.onConnect.addListener(port => {\n            if (port.name === 'weirwood') {\n                console.log(\"Porter, heard port connect to weirwood. port tabId: \", port.sender!.tab!.id!);\n                this.addPort(port);\n                this.sendStateUpdate(port.sender!.tab!.id!,)\n            }\n        });\n    }\n\n    private addPort(port: browser.Runtime.Port): void {\n        console.log(\"Porter, adding port: \", port);\n        const tabId = port.sender!.tab!.id!;\n        const frameId = port.sender!.frameId!;\n        if (!!this.ports[tabId] && this.ports[tabId].hasOwnProperty(frameId)) {\n            console.log('Porter, tabId already exists. Ignoring add request.');\n            return;\n        }\n        if (!this.ports[tabId]) {\n            this.ports[tabId] = { [frameId]: port };\n        } else {\n            this.ports[tabId][frameId] = port;\n        }\n        console.log(\"Porter, added port. Ports: \", this.ports);\n        port.onMessage.addListener(message => this.handleMessage(tabId, message));\n        port.onDisconnect.addListener(() => {\n            console.log('Ports disconnected. tabId: ', tabId);\n            delete this.ports[tabId];\n            this.instanceDisconnectListener(port);\n        });\n        this.onInstanceConnectListener(port);\n    }\n\n    public onInstanceConnect(handler: (port: browser.Runtime.Port) => void): void {\n        this.onInstanceConnectListener = handler;\n    }\n\n    public onInstanceDisconnect(handler: (port: browser.Runtime.Port) => void): void {\n        this.instanceDisconnectListener = handler;\n    }\n\n    private handleMessage(tabId: number, message: any): void {\n        if (message.type === 'setState') {\n            console.log('handleMessage, setState');\n            this.stateManager.set(message.state, tabId);\n        }\n        if (message.type === 'setInstanceState') {\n            console.log('handleMessage, setInstanceState');\n            this.stateManager.set(message.state, message.tabId);\n        }\n    }\n\n    private sendStateUpdate(tabId: number): void {\n        if (this.ports[tabId]) {\n            console.log('sendStateUpdate: tab', tabId, ' state: ', this.stateManager.get(tabId));\n            Object.keys(this.ports[tabId]).forEach(frameId => {\n                this.ports[tabId][Number(frameId)].postMessage({\n                    type: 'stateUpdate',\n                    state: {\n                        ...this.stateManager.get(tabId),\n                    }\n                });\n            });\n            // this.ports[tabId].postMessage({\n            //     type: 'stateUpdate',\n            //     state: {\n            //         ...this.stateManager.get(tabId),\n            //     }\n            // });\n        } else {\n            console.log('sendStateUpdate: No port for tabId: ', tabId, ' yet.');\n        }\n    }\n\n    public broadcastStateUpdate(state: any): void {\n        console.log('Broadcasting state update');\n        Object.keys(this.ports).forEach(tabId => {\n            this.sendStateUpdate(Number(tabId))\n        });\n    }\n}\n"],
  "mappings": "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",
  "names": ["browser", "browser", "Porter", "stateManager", "port", "tabId", "frameId", "message", "handler", "state", "Weirwood", "config", "storagePrefix", "Porter", "port", "context", "tabId", "changes", "state", "instance", "worker", "key", "item", "instanceKey", "instanceState", "workerKey", "workerState", "update", "listener", "initialInstanceState", "handler", "persistence", "value", "browser", "local", "session", "combined", "prefixedKey", "a", "b", "keysA", "keysB", "i", "create", "connect", "_state", "getDerivedState", "listeners", "listenerId", "message", "newState", "callback", "id"]
}
